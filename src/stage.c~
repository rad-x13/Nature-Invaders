/*
 * stage.c
 */

#include "stage.h"

static void logic(void);
static void clipEnemies(void);
static void clipPlayer(void);
static void draw(void);
static void createEnemyLine(int, SDL_Texture*);
static void initEnemies(void);
static void initPlayer(void);
static void doPlayer(void);
static void drawFighters(void);
static void fireBullet(void);
static void doEnemies(void);
static void doBullets(void);
static void drawBullets(void);
static void doFighters(void);
static int bulletHitFighter(Entity *b);

static Entity *player;
static SDL_Texture *bulletTexture;
static SDL_Texture *enemyLargeTexture;
static SDL_Texture *playerTexture;
static int enemyStepTimer;
int enemyWay;

void initStage(void)
{
        app.delegate.logic = logic;
	app.delegate.draw = draw;

	//memset(&stage, 0, sizeof(Stage));
	
	stage.bulletTail = &stage.bulletHead;
	stage.fighterTail = &stage.fighterHead;

	bulletTexture = loadTexture("gfx/bullet.png");
	enemyLargeTexture = loadTexture("gfx/player.png");
	playerTexture = loadTexture("gfx/player.png");
	
	memset(app.keyboard, 0 , sizeof(int) * MAX_KEYBOARD_KEYS);

	initPlayer();
	initEnemies();

	enemyStepTimer = FPS;
	enemyWay = 1;
}

static void initPlayer()
{
	player = malloc(sizeof(Entity));
	memset(player, 0, sizeof(Entity));
	stage.fighterTail->next = player;
	stage.fighterTail = player;

	player->x = 100;
	player->y = 800;
	player->texture = playerTexture;
	// This code line is useless.
	SDL_QueryTexture(player->texture, NULL, NULL, &player->w, &player->h);

	player->health = 1;
	player->side = SIDE_PLAYER;
}

static void createEnemyLine(int lineNumber, SDL_Texture *texture)
{
	int i;
	
	for (i = 1; i <= MAX_ENEMIES_LINE; i++)
	{
		Entity *enemy;

		enemy = malloc(sizeof(Entity));
		memset(enemy, 0, sizeof(Entity));
		stage.fighterTail->next = enemy;
		stage.fighterTail = enemy;

		enemy->texture = texture;
		SDL_QueryTexture(enemy->texture, NULL, NULL, &enemy->w, &enemy->h);

      		enemy->x = ENEMY_HORIZONTAL_POSITION + (enemy->w + (enemy->w / 2)) * i;
	        enemy->y = ENEMY_VERTICAL_POSITION - (enemy->h + (enemy->h /2)) * (lineNumber - 1);
		enemy->dx = enemy->w;
		enemy->dy = enemy->h;
		
		enemy->health = 1;
		enemy->side = SIDE_ALIEN;
	}	
}

static void initEnemies()
{
	// large enemy lines
	createEnemyLine(1, enemyLargeTexture);
	createEnemyLine(2, enemyLargeTexture);

	// meduim enemy lines
	createEnemyLine(3, enemyLargeTexture);
	createEnemyLine(4, enemyLargeTexture);

	// small enemy lines
	createEnemyLine(5, enemyLargeTexture);
}

static void logic(void)
{
	doPlayer();

	doEnemies();

	doFighters();

	doBullets();

	clipEnemies();
	
	clipPlayer();
}

static void doPlayer(void)
{
	if (player != NULL)
	{
		player->dx = 0;

		if (player->reload > 0)
		{
			player->reload--;
		}

	      	if (app.keyboard[SDL_SCANCODE_LEFT])
		{
			player->dx = -PLAYER_SPEED;
		}

	      	if (app.keyboard[SDL_SCANCODE_RIGHT])
		{
			player->dx = PLAYER_SPEED;
		}

		if (app.keyboard[SDL_SCANCODE_LCTRL] && player->reload <= 0)
		{
			fireBullet();
		}
	}

	player->x += player->dx;
	player->y += player->dy;
}

static void fireBullet(void)
{
	Entity *bullet;

	bullet = malloc(sizeof(Entity));
	memset(bullet, 0, sizeof(Entity));
	stage.bulletTail->next = bullet;
	stage.bulletTail = bullet;

	bullet->x = player->x;
	bullet->y = player->y;
	bullet->dy = -PLAYER_BULLET_SPEED;
	bullet->health = 1;
	bullet->texture = bulletTexture;
	SDL_QueryTexture(bullet->texture, NULL, NULL, &bullet->w, &bullet->h);

	bullet->y += (player->h / 2) - (bullet->h / 2);

	bullet->side = SIDE_PLAYER;
	
	player->reload = 20;
}

static void doBullets(void)
{
	Entity *b, *prev;

	prev = &stage.bulletHead;

	for (b = stage.bulletHead.next; b != NULL; b = b->next)
	{
		b->x += b->dx;
		b->y += b->dy;

		if (bulletHitFighter(b)
		    || b->x < -b->w || b->y < -b->h
		    || b->x > SCREEN_WIDTH || b->y > SCREEN_HEIGHT)
		{
			if (b == stage.bulletTail)
			{
				stage.bulletTail = prev;
			}

			prev->next = b->next;
			free(b);
			b = prev;
       		}

		prev = b;
	}
}

static int bulletHitFighter(Entity *b)
{
	Entity *e;

	for (e = stage.fighterHead.next; e != NULL; e = e->next)
	{
		if(e->side != b->side
		   && collision(b->x, b->y, b->w, b->h, e->x, e->y, e->w, e->h))
		{
			b->health = 0;
			e->health = 0;

			//addExplosions(e->x, e->y, 32);

			//addDebris(e);

			return 1;
		}
	}

	return 0;
}

static void doFighters(void)
{
	Entity *e, *prev;

	prev = &stage.fighterHead;

	for (e = stage.fighterHead.next; e != NULL; e = e->next)
	{
		if (e->health == 0)
		{
			if (e == player)
			{
				player = NULL;
			}

			if (e == stage.fighterTail)
			{
				stage.fighterTail = prev;
			}

			prev->next = e->next;
			free(e);
			e = prev;
		}
		
		prev = e;
	}
}

static void doEnemies(void)
{
	Entity *e;

	if (--enemyStepTimer <= 0)
	{		
		for (e = stage.fighterHead.next; e != NULL; e = e->next)
		{
			if(e != player)
			{
				//e->y += e->dy;
				e->x += enemyWay * e->dx;
       			}
		}

		enemyStepTimer = FPS;
	}
}

static void clipEnemies(void)
{
	Entity *e;

	for (e = stage.fighterHead.next; e != NULL; e = e->next)
	{
		if (e->x > SCREEN_WIDTH - e->w - ENEMY_HORIZONTAL_POSITION)
		{
			enemyWay = -1;
		}
				
		if (e->x < ENEMY_HORIZONTAL_POSITION)
		{
			enemyWay = 1;
		}	
	}
}

static void clipPlayer(void)
{
	if (player != NULL)
	{
		if (player->x < 0)
		{
			player->x = 0;
		}
		
		if (player->x > SCREEN_WIDTH - player->w)
		{
			player->x = SCREEN_WIDTH - player->w;
		}
	}
}

static void draw(void)
{
	drawFighters();

	drawBullets();
}

static void drawFighters(void)
{
	Entity *e;

	for(e = stage.fighterHead.next; e != NULL; e = e->next)
	{
		blit(e->texture, e->x, e->y);
	}
}

static void drawBullets(void)
{
	Entity *b;

	for (b = stage.bulletHead.next; b != NULL; b = b->next)
	{
		blit(b->texture, b->x, b->y);
	}
}
